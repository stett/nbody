#version 450

layout(local_size_x = 256) in;

struct Body
{
    vec3 pos;
    float radius;
    vec3 vel;
    float mass;
    vec3 acc;
    float __pad;
};

struct Node
{
    vec3 bounds_center;
    float bounds_size;
    vec3 com;
    float mass;
    uint next;
    uint children;
    uint __pad0;
    uint __pad1;
};

layout(push_constant) uniform PushConstants {
    float dt;
    float theta;
    float G;
    int num_bodies;
    int num_nodes;
    int mode;
} pc;

const int N2 = 0;
const int NLogN = 1;

layout(std430, binding = 0) buffer Bodies {
    Body bodies[];
};

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= uint(pc.num_bodies))
    return;

    // get current state for this body
    vec3 pos = bodies[i].pos;
    vec3 vel = bodies[i].vel;
    vec3 acc = bodies[i].acc;

    // integrate using semi-implicit euler
    vel += acc * pc.dt;
    pos += vel * pc.dt;

    // update body info
    bodies[i].pos = pos;
    bodies[i].vel = vel;
}
